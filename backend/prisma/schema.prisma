// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teams     TeamMember[]
  automations Automation[]
  conversations Conversation[]
  products  Product[]     // All products for this user
  jobLogs   JobLog[]     // All job executions for this user
  aiResponses AIResponse[]     // All AI responses for this user
  aiConversations AIConversation[]     // All AI conversations for this user
  aiTrainingData AITrainingData[]     // All AI training data for this user
  campaigns Campaign[]     // All campaigns for this user
  subscriptions Subscription[]     // All subscriptions for this user
  invoices  Invoice[]     // All invoices for this user
  paymentMethods PaymentMethod[]     // All payment methods for this user
  usageRecords UsageRecord[]     // All usage records for this user
  accountSettings AccountSettings?     // User account settings
  accountActivities AccountActivity[]     // User activity log
  dataExports DataExport[]     // User data exports

  @@map("users")
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     TeamMember[]
  instagramAccounts InstagramAccount[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  teamId String   @db.ObjectId
  role   TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model InstagramAccount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId       String   @db.ObjectId
  igUserId     String   @unique
  igUsername   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  meta         Json?    // Store additional Instagram account metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  team         Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("instagram_accounts")
}

model Automation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String?
  trigger     Json     // Store trigger configuration as JSON
  response    Json     // Store response configuration as JSON
  status      AutomationStatus @default(DRAFT)
  priority    AutomationPriority @default(MEDIUM)
  isActive    Boolean  @default(false)
  tags        String[] @default([])
  conditions  Json     // Store additional conditions as JSON
  performance Json     // Store performance metrics as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  jobLogs     JobLog[]     // All job executions for this automation

  @@map("automations")
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  instagramAccountId String @db.ObjectId
  externalConversationId String // Instagram conversation ID
  participantId String   // Instagram user ID
  participantUsername String
  participantFullName String?
  participantProfilePic String?
  status        ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime @default(now())
  lastMessageText String?
  messageCount  Int      @default(0)
  isAutomated   Boolean  @default(false)
  automationId  String?  @db.ObjectId
  tags          String[] @default([])
  priority      ConversationPriority @default(MEDIUM)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccount InstagramAccount @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  automation    Automation? @relation(fields: [automationId], references: [id], onDelete: SetNull)
  messages      Message[]

  @@unique([instagramAccountId, externalConversationId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  externalMessageId String // Instagram message ID
  senderType     MessageSenderType
  senderId       String
  senderName     String
  text           String
  mediaUrls      String[] @default([])
  messageType    MessageType @default(TEXT)
  status         MessageStatus @default(PENDING)
  metadata       Json?    // Store message metadata (attachments, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  description   String
  category      String
  price         Float
  currency      String   @default("USD")
  images        String[] @default([])
  tags          String[] @default([])
  specifications Json    // Store product specifications as JSON
  availability  ProductAvailability @default(IN_STOCK)
  metadata      Json?    // Store additional product metadata
  searchCount   Int      @default(0) // Track how many times this product was searched
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

model JobLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  jobType      JobType
  payload      Json
  status       JobStatus @default(PENDING)
  error        String?
  runAt        DateTime @default(now())
  completedAt  DateTime?
  
  // Link to automation and user
  automationId String?  @db.ObjectId
  userId       String?  @db.ObjectId

  // Relations
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: SetNull)
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("job_logs")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TriggerType {
  DM_KEYWORD
  COMMENT_KEYWORD
  STORY_REPLY
  MENTION
  HASHTAG
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
  PENDING
  RESOLVED
}

enum ConversationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageSenderType {
  USER
  BOT
  EXTERNAL
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  STICKER
  LOCATION
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
}

enum JobType {
  PROCESS_WEBHOOK_EVENT
  RUN_AUTOMATION
  DELIVER_MESSAGE
  SYNC_ACCOUNT
  AI_GENERATE_REPLY
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum AutomationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProductAvailability {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
  DISCONTINUED
}

// AI Models
model AIResponse {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  conversationId String? @db.ObjectId
  message      String
  response     String
  model        String
  tokensUsed   Int
  responseTime Int      // in milliseconds
  confidence   Float
  metadata     Json?    // Store AI response metadata
  createdAt    DateTime @default(now())

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation AIConversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@map("ai_responses")
}

model AIConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  summary   String?
  tags      String[] @default([])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  AIMessage[]
  responses AIResponse[]

  @@map("ai_conversations")
}

model AIMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  role           String   // "user", "assistant", "system"
  content        String
  timestamp      DateTime @default(now())
  metadata       Json?    // Store message metadata

  // Relations
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}

model AITrainingData {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  input           String
  expectedOutput  String
  category        String
  tags            String[] @default([])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_training_data")
}

// Campaign Models
model Campaign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String?
  type        Json     // Store campaign type as JSON
  status      Json     // Store campaign status as JSON
  isActive    Boolean  @default(true)
  settings    Json     // Store campaign settings as JSON
  metadata    Json?    // Store campaign metadata as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  faqs        FAQ[]
  responses   CampaignResponse[]

  @@map("campaigns")
}

model FAQ {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String   @db.ObjectId
  question    String
  answer      String
  category    String
  tags        String[] @default([])
  priority    Json     // Store FAQ priority as JSON
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  responses   CampaignResponse[]

  @@map("faqs")
}

model CampaignResponse {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId     String   @db.ObjectId
  conversationId String
  faqId          String?  @db.ObjectId
  userMessage    String
  botResponse    String
  responseType   String   // "FAQ", "AUTO", "MANUAL", "FALLBACK"
  confidence     Float
  responseTime   Int      // in milliseconds
  metadata       Json?    // Store response metadata as JSON
  createdAt      DateTime @default(now())

  // Relations
  campaign       Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  faq            FAQ? @relation(fields: [faqId], references: [id], onDelete: SetNull)

  @@map("campaign_responses")
}

// Billing Models
model Subscription {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @db.ObjectId
  planId                String   @db.ObjectId
  status                SubscriptionStatus @default(TRIALING)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  trialStart            DateTime?
  trialEnd              DateTime?
  stripeSubscriptionId  String?  @unique
  stripeCustomerId      String?
  metadata              Json?    // Store additional subscription metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Restrict)
  invoices              Invoice[]
  usageRecords          UsageRecord[]

  @@map("subscriptions")
}

model SubscriptionPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  currency      String   @default("USD")
  interval      BillingInterval
  intervalCount Int      @default(1)
  features      Json     // Store plan features as JSON
  isActive      Boolean  @default(true)
  stripePriceId String?  @unique
  metadata      Json?    // Store additional plan metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Invoice {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  subscriptionId   String   @db.ObjectId
  amount           Float
  currency         String   @default("USD")
  status           InvoiceStatus @default(DRAFT)
  description      String
  invoiceUrl       String?
  paidAt           DateTime?
  dueDate          DateTime
  stripeInvoiceId  String?  @unique
  metadata         Json?    // Store additional invoice metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model PaymentMethod {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String   @db.ObjectId
  type                   PaymentMethodType
  last4                  String?
  brand                  String?
  expiryMonth            Int?
  expiryYear             Int?
  isDefault              Boolean  @default(false)
  stripePaymentMethodId  String?  @unique
  metadata               Json?    // Store additional payment method metadata
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  user                   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model UsageRecord {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  subscriptionId String   @db.ObjectId
  feature        String
  usage          Int      @default(0)
  limit          Int
  period         String   // YYYY-MM format
  metadata       Json?    // Store additional usage metadata
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, feature, period])
  @@map("usage_records")
}

// Billing Enums
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum BillingInterval {
  MONTH
  YEAR
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  PAYPAL
}

// Account Management Models
model AccountSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId @unique
  emailNotifications  Json     // Store email notification settings as JSON
  pushNotifications   Json     // Store push notification settings as JSON
  privacySettings     Json     // Store privacy settings as JSON
  automationSettings  Json     // Store automation settings as JSON
  aiSettings          Json     // Store AI settings as JSON
  metadata            Json?    // Store additional settings metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_settings")
}

model AccountActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        ActivityType
  description String
  metadata    Json?    // Store activity metadata as JSON
  ipAddress   String?
  userAgent   String?
  location    String?
  createdAt   DateTime @default(now())

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_activities")
}

model DataExport {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  status       ExportStatus @default(PENDING)
  dataTypes    String[] // Array of data types to export
  format       String   // 'json' or 'csv'
  fileUrl      String?
  expiresAt    DateTime
  metadata     Json?    // Store export metadata as JSON
  createdAt    DateTime @default(now())
  completedAt  DateTime?

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_exports")
}

// Account Management Enums
enum ActivityType {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PROFILE_UPDATE
  SETTINGS_UPDATE
  SUBSCRIPTION_CHANGE
  PAYMENT_METHOD_ADDED
  PAYMENT_METHOD_REMOVED
  INSTAGRAM_CONNECTED
  INSTAGRAM_DISCONNECTED
  AUTOMATION_CREATED
  AUTOMATION_UPDATED
  AUTOMATION_DELETED
  PRODUCT_ADDED
  PRODUCT_UPDATED
  AI_CONVERSATION_STARTED
  CAMPAIGN_CREATED
  CAMPAIGN_UPDATED
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
