// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teams     TeamMember[]
  automations Automation[]
  conversations Conversation[]
  products  Product[]     // All products for this user
  jobLogs   JobLog[]     // All job executions for this user

  @@map("users")
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     TeamMember[]
  instagramAccounts InstagramAccount[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  teamId String   @db.ObjectId
  role   TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model InstagramAccount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId       String   @db.ObjectId
  igUserId     String   @unique
  igUsername   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  meta         Json?    // Store additional Instagram account metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  team         Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("instagram_accounts")
}

model Automation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String?
  trigger     Json     // Store trigger configuration as JSON
  response    Json     // Store response configuration as JSON
  status      AutomationStatus @default(DRAFT)
  priority    AutomationPriority @default(MEDIUM)
  isActive    Boolean  @default(false)
  tags        String[] @default([])
  conditions  Json     // Store additional conditions as JSON
  performance Json     // Store performance metrics as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  jobLogs     JobLog[]     // All job executions for this automation

  @@map("automations")
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  instagramAccountId String @db.ObjectId
  externalConversationId String // Instagram conversation ID
  participantId String   // Instagram user ID
  participantUsername String
  participantFullName String?
  participantProfilePic String?
  status        ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime @default(now())
  lastMessageText String?
  messageCount  Int      @default(0)
  isAutomated   Boolean  @default(false)
  automationId  String?  @db.ObjectId
  tags          String[] @default([])
  priority      ConversationPriority @default(MEDIUM)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccount InstagramAccount @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  automation    Automation? @relation(fields: [automationId], references: [id], onDelete: SetNull)
  messages      Message[]

  @@unique([instagramAccountId, externalConversationId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  externalMessageId String // Instagram message ID
  senderType     MessageSenderType
  senderId       String
  senderName     String
  text           String
  mediaUrls      String[] @default([])
  messageType    MessageType @default(TEXT)
  status         MessageStatus @default(PENDING)
  metadata       Json?    // Store message metadata (attachments, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  description   String
  category      String
  price         Float
  currency      String   @default("USD")
  images        String[] @default([])
  tags          String[] @default([])
  specifications Json    // Store product specifications as JSON
  availability  ProductAvailability @default(IN_STOCK)
  metadata      Json?    // Store additional product metadata
  searchCount   Int      @default(0) // Track how many times this product was searched
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

model JobLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  jobType      JobType
  payload      Json
  status       JobStatus @default(PENDING)
  error        String?
  runAt        DateTime @default(now())
  completedAt  DateTime?
  
  // Link to automation and user
  automationId String?  @db.ObjectId
  userId       String?  @db.ObjectId

  // Relations
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: SetNull)
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("job_logs")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TriggerType {
  DM_KEYWORD
  COMMENT_KEYWORD
  STORY_REPLY
  MENTION
  HASHTAG
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
  PENDING
  RESOLVED
}

enum ConversationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageSenderType {
  USER
  BOT
  EXTERNAL
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  STICKER
  LOCATION
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
}

enum JobType {
  PROCESS_WEBHOOK_EVENT
  RUN_AUTOMATION
  DELIVER_MESSAGE
  SYNC_ACCOUNT
  AI_GENERATE_REPLY
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum AutomationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProductAvailability {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
  DISCONTINUED
}
